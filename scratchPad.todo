---- MVP I
	- complete Routes
		- unit tests
		- integration tests
	- working test suite on Travis CI
	- mock data set to study
	- flow for adding cards in bulk
	- playable deck in front end that updates results
	- Project Documentation
		- proper README.md
		- github description
	- Better Unit Test formatting
		- spacing
		- message when DB inserts/doesn't

comfortable asking questions and not having immediate answer
	current practice bootstrap MongoDB with default data
	is vagrant a good fit for my app?
	what's an effictve test for .populate methods
	think through testing a front end
	what is your definition of TDD and BDD?  How do they differ?
		TDD is about detail whereas BDD removes detail in favor of general behvaior
	what happens when user is deleted?
		what happnes to UserCards that reference the User's created Deck DeckCards?

	--- Routes:
		-- dbAPI
			-	- action | REST Protocol | query parms | request body | route
			-- USER
				+- create user  | POST   | none      | /api/user
				- delete user  | DELETE | _id       | /api/user/_id/:_id
					- should remove all UserCards
					- created decks should be given to generic user
				+- edit user    | PUT    | _id       | /api/user/_id/:_id
				+- get user     | GET    | _id       | /api/user/_id/:_id
				+- all users    | GET    | none      | /api/users
				- learning     | POST   |
can implemented PUT handle this?
				+- rm learning  | DELETE |
				+- updtLearning | PUT    |
			+-- DECK
				+- create deck | POST   | none      | /api/deck
				+- edit deck   | PUT    | _id       | /api/deck/_id/:_id
				+- delete deck | DELETE | _id       | /api/deck/_id/:_id
				+- all decks   | GET    | none      | /api/decks
				+- get a deck  | GET    | _id       | /api/deck/_id/:_id
				.- get a deck  | GET    | name      | /api/deck/name/:name
			+-- Delete MOCK Data
				- insert all user data
				- insert all deck
				- associations between default decks and users
			-- UserCard
				- all userCards   | GET    | none | none           | /api/usercards
				- get userCard    | GET    | _id  | none           | /api/usercard/:_id
				- delete userCard | DELETE | _id  | none           | /api/usercard/:_id
				- update userCard | PUT    | _id  | valid usercard | /api/usercard/:_id
				- create userCard | POST   | none | valid usercard | /api/usercard
			+-- DeckCard		
				+- create card | POST   | deck_id          | /api/deck/:deck_id/card
				+- edit card   | PUT    | deck_id, card_id | /api/deck/:deck_id/card/:card_id
					- add lastUpdated field; make it set to call time of PUT
				+- delete card | DELETE | deck_id, card_id | /api/deck/:deck_id/card/:card_id
				+- all cards   | GET    | deck_id          | /api/deck/:deck_id/card
---- Front End
/*
	Ideas

	res.render data after api calls are done
	move rendering into its own named function
		testable
		rendering done inside callback

	ajax/http.request call for data
		massage data
		render data

	output based on responses
		what are the possible responses from dbAPI?
		array - what if empty or errort
			set string message and set it based on response statusCode
			send to view
	include div for error (will only display if error message is sent through [Getting MEAN 214])
*/
/* Questions

	What framework to unit test?
		any compatible with mocha?

	What new routes are needed in front end?
	What new controllers are needed in front end?
	What other pages are needed

*/
---- Misc
	--- Learning Algorithm
		- save state on practice feedback:  What could be added?
			- date last got correct
			- number of times did not get correct:  show ones with less success more often
			- success/practice
			- suggestion when to study next
				- 1 day
				- 3 days
				- 1 week
				- 2 weeks
				- 1 month
				- 2 months
				- 3 months
	--- Coding books and continued learning?
			-4 https://medium.com/@sapegin/what-to-learn-in-2017-if-youre-a-frontend-developer-b6cfef46effd#.exzl2h3md
			-4 https://medium.freecodecamp.com/5-key-learnings-from-the-post-bootcamp-job-search-9a07468d2331#.4y6kpunud
	--- Tools
		-- Local Builds
			- Jenkins RasPi