---- Back End
	--- Routes: intent | REST | URL Parms | URL
		-- USER
			+- create user | POST   | none      | /api/user
			+- delete user | DELETE | _id       | /api/user/_id/:_id
				User.findOneAndRemove
			- edit user   | PUT    | _id       | /api/user/_id/:_id
			- get user    | GET    | _id       | /api/user/_id/:_id
			+- get user    | GET    | userName  | /api/user/name/:userName
			- all users   | GET    | none      | /api/users
		-- DECK
			- create deck | POST   | none      | /api/deck
			- edit deck   | PUT    | _id       | /api/deck/_id/:_id
			- delete deck | DELETE | _id       | /api/deck/_id/:_id
			- all decks   | GET    | none      | /api/decks
			+- get a deck  | GET    | _id       | /api/deck/_id/:_id
			+- get a deck  | GET    | name      | /api/deck/name/:name
		-- CARD
			- create card | POST   | deck_id          | /api/deck/:deck_id/card
			- edit card   | PUT    | deck_id, card_id | /api/deck/:deck_id/card/:card_id
			- delete card | DELETE | deck_id, card_id | /api/deck/:deck_id/card/:card_id
			- all cards   | GET    | deck_id          | /api/deck/:deck_id/card
		-- MOCK Data
			+- insert all user data
			+- insert all deck
			- associations between default decks and users
			----- create more decks
	--- Model
		+-- Cards
			+- answer and answer as [String], allows multi line responses
		-- Deck
			- Decks being practied by a user need to be stored with that user model
				+- save to user object
				- how to update if deck gets new additions?
				+- fork their own copy of the deck
				+- create cards off originals
				- what becomes of favs?
					- +1 each time someone chooses to 'learn' the deck
	--- Mocha
		-- Better testing with a DB
			- how to know the state
			- create separate test db
			- how to test users
			- how to make sure no interactions are messing with eachother
		-- Assertion library usage
		-- How to load instance of server for testing vs running main
	--- Misc
			-- think/write out routes for interactions with Decks, Users, and Cards
			-- standard load order for requires
			-- finalize global.js and load everywhere
			-- research/implement better API error handling
---- Front End
	--- Balsamiq mocks
		- /login
		- /signup
		- /home
		- /deck/form
		- /deck/form/create
		- /deck/create
		- /deck/create/cards
	--- Controller calls
		-- signUpCtrl
		- /signup
			- GET single user
				- check exists
			- PUT new user data
		-- deckCtrl
			- /deck/form:import
				- GET single user
				- PUT deck _id to user created
				- Check is JSON
				- Read in data from JSON
				- POST deck
			- /deck/create
				- GET single user
				- keep data available as card input happens
			- /deck/create/cards
				- keep data from /deck/create
				- GET single user
				- POST cards to created deck
	--- Beautify questions.jade
			- center vertically
			- correct/incorrect inline, adjacent
				- consistent spacing
			- questions don't redraw
			- no highlighting when clicking
	--- Client side computing
		-- Learning Algorithm
			- save state on practice feedback:  What could be added?
				- date last got correct
				- number of times did not get correct:  show ones with less success more often
				- success/practice
				- suggestion when to study next
					- 1 day
					- 3 days
					- 1 week
					- 2 weeks
					- 1 month
					- 2 months
					- 3 months
		-- Incorporate into questons.jade
			- update deck model as questions answered
				- lastTime true/false -> gotIt/needPractice
				- timestamp of last time
				- answerHistory -> record success past 10 times, number or percent
	--- Future Enhancements
		-- Edit Questions
		- Load all Questions
			- plesant display
			- fuzzy search
			- punch in/out editing
			- send all back to db at one time
		-- Should be limit on questions allowed
---- Misc
	--- Tools
		-- BitBucket auth
		-- Github auth
		-- Jenkins RasPi
	--- Questions
		-- When/where should res.send(STATUS); be called during mongoose query operations?
		-- When to use map() over iterating?
		-- How to asynchronously unit test?
		-- How does done() really work in Mocha?
		-- Gracefully handle errors?