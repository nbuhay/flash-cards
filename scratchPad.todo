+---- Model
	+--- app will have users
		-- user
			- name String
			- id Mongo_id
			- pswd ???
			- email String
			- zip Int
			- decks
				- favorite [] deck_id
				- created [] deck_id
	+--- app will have decks
		-- deck
			- id Mongo_id
			- title String
			- category String
			- cards[questions]
				- question
				- answer 
			- totalFavs
	+--- decks have cards
		- card
			- id Mongo_id
			- question String
			- answer String

---

Routes

intent      | REST   | URL Parms | URL

create user | POST   | none      | api/user
delete user | DELETE | user_id   | api/user/:user_id
edit user   | PUT    | user_id   | api/user/:user_id
get user    | GET    | user_id   | api/user/:user_id
all users   | GET    | none      | api/user

create deck | POST   | none      | api/deck/
edit deck   | PUT    | deck_id   | api/deck/:deck_id
delete deck | DELETE | deck_id   | api/deck/:deck_id
all decks   | GET    | none      | api/deck/
get a deck  | GET    | deck_id   | api/deck/:deck_id

create card | POST   | deck_id          | api/deck/:deck_id/card
edit card   | PUT    | deck_id, card_id | api/deck/:deck_id/card/:card_id
delete card | DELETE | deck_id, card_id | api/deck/:deck_id/card/:card_id
all cards   | GET    | deck_id          | api/deck/:deck_id/card

-- webpages from Balsamiq mocks

/login
/signup
/home
/deck/form
/deck/form/create
/deck/create
/deck/create/cards

	+Complete Import: Saturday and Sunday `Morning` Work
		+---- display all user's decks
			+- user data object
				+--- mongoose library
				+--- make object definition
				+--- create controller for home page
				+--- create user data here
				+--- send call to home route to the use home controller
				+--- return user data to home.jade
			+- home.html changes
				+--- deck div with ID
				+- deck data from user 
				+--- deck resuseable mixin
				+--- load decks from user object
				+--- iterate through decks
				+--- add mixin per deck
		+---- import page
			+--- load json
			+--- goto search page
		+---- deck data object: no cards, yet
			--- mongoose library
			--- make object definition
			--- load into home page
---- Week of Dec12-Dec18
	---- Edit Questions
		-- Load all Questions
		- plesant display
		- fuzzy search
		- punch in/out editing
		- send all back to db at one time
		-- Should be limit on questions allowed
	---- Add data to controllers -> controllers populate JADE templates 
	+-- homeCtrl
		+- /home
			- greeting userName
			- GET user
			- home controller
				call for user, pass in the name
		+- GET decks
			+- get deck _ids from user
				+----- Deck db api route needed
					+- save mock decks
						- created by mock user
						+- favorites by mock user
					+- lookup mock decks
					+- call db api with Node.js http.request from home controller
					- return to Jade template
	-- signUpCtrl
		- /signup
			- GET single user
				- check exists
			- PUT new user data
	-- deckCtrl
		- /deck/form:import
			- GET single user
			- PUT deck _id to user created
			- Check is JSON
			- Read in data from JSON
			- POST deck
		- /deck/create
			- GET single user
			- keep data available as card input happens
		- /deck/create/cards
			- keep data from /deck/create
			- GET single user
			- POST cards to created deck
	---- Enhancement - Deck Model and Learning
		---- Decks being practied by a user need to be stored with that user model
			-- save to user object
				- how to update if deck gets new additions?
			-- what becomes of favs?
		---- Basic Learning Algorithm 
			-- save state on practice feedback:  What could be added?
				- date last got correct
				- number of times did not get correct:  show ones with less success more often
				- success/practice
				- suggestion when to study next
					- 1 day
					- 3 days
					- 1 week
					- 2 weeks
					- 1 month
					- 2 months
					- 3 months
		---- Incorporate into questons.jade
			-- update deck model as questions answered
				- lastTime true/false -> gotIt/needPractice
				- timestamp of last time
				- answerHistory -> record success past 10 times, number or percent
		---- Beautify questions.jade
			- center vertically
			- correct/incorrect inline, adjacent
				- consistent spacing
			- questions don't redraw
			- no highlighting when clicking
	----- Testing with Mocha
	http://taylor.fausak.me/2013/02/17/testing-a-node-js-http-server-with-mocha/
	--- Boilerplate
		- start server before, kill server after
		- 

	--- When/where should res.send(STATUS); be called during mongoose query operations?
	--- When to use map() over iterating?
	--- How to asynchronously unit test?
	--- How does done() really work in Mocha?

---- Fun Project: Eyes and Sound
	-- Picture 
		- moving eyes
	-- Animated hand
	-- Noise01 when click face
	-- Noise02 when click background
	-- Noise03 when click body